name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.23', '1.24']
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run unit tests
      run: go test -v -race -coverprofile=coverage.out ./... | tee test-results.log
      
    - name: Upload test results on failure
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-go${{ matrix.go-version }}
        path: test-results.log
      if: failure()
      
    - name: Run integration tests
      run: go test -v -tags=integration ./tests/integration/... | tee integration-test-results.log
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      
    - name: Upload integration test results on failure
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results-${{ matrix.os }}-go${{ matrix.go-version }}
        path: integration-test-results.log
      if: failure() && matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      
    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.os }}-go${{ matrix.go-version }}
        path: coverage.html
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
        
    - name: Run go vet
      run: go vet ./...
      
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest
      
    - name: Run gosec security scanner
      run: gosec -fmt sarif -out gosec.sarif ./...
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
        
    - name: Upload gosec results on failure
      uses: actions/upload-artifact@v4
      with:
        name: gosec-results
        path: gosec.sarif
      if: failure()
        
    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./... || echo "Vulnerabilities found - check output above"

  build:
    name: Build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        
    - name: Build binary
      env:
        GOOS: ${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'macos-latest' && 'darwin' || 'windows' }}
        GOARCH: ${{ matrix.arch }}
      run: |
        if [ "$GOOS" = "windows" ]; then
          go build -o cge.exe .
        else
          go build -o cge .
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cge-${{ matrix.os }}-${{ matrix.arch }}
        path: cge*

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        
    - name: Run benchmarks
      run: go test -bench=. -benchmem ./... > benchmark.txt
      
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.txt

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: cge:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm cge:latest --version

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "Tests failed"
          exit 1
        fi
        
    - name: Check lint results
      run: |
        if [ "${{ needs.lint.result }}" != "success" ]; then
          echo "Linting failed"
          exit 1
        fi
        
    - name: Check security results
      run: |
        if [ "${{ needs.security.result }}" != "success" ]; then
          echo "Security scan failed"
          exit 1
        fi
        
    - name: Check build results
      run: |
        if [ "${{ needs.build.result }}" != "success" ]; then
          echo "Build failed"
          exit 1
        fi
        
    - name: Quality gate passed
      run: echo "All quality checks passed!" 